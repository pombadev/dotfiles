#!/usr/bin/env python3

import json
import multiprocessing
from typing import Dict
from urllib import request

base_url = "https://lobste.rs"
# cspell: disable-line
logo = "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"


def fetch(path: str):
    url = f"{base_url}/{path}"
    req = request.Request(url)
    req.add_header('Accept', 'application/json')
    req.add_header('User-Agent', 'Argos-Gnome-Extension/User-Script')

    with request.urlopen(req) as response:
        body = response.read()
        ret: Dict = json.loads(body)

    return (path, ret)


def fetch_all():
    urls = [
        "hottest",
        "active",
        "newest",
    ]

    with multiprocessing.Pool() as pool:
        res = pool.map(fetch, urls)

    return res


def main():
    # extension's logo
    print(f"Lobsters | imageWidth=16 imageHeight=16 image={logo}")
    print("---")

    try:
        all_items = fetch_all()

        for (title, items) in all_items:
            print(title.capitalize())

            for item in items:
                print(f"--{item['title']} | href={item['url']}")

            print("---")
    except:
        pass

    # open lobste.rs in default browser
    print(f"Lobsters | href={base_url} iconName=web-browser")
    print("---")

    # refresh output
    print("Reload | iconName=view-refresh-symbolic refresh=true")
    print("---")


if __name__ == "__main__":
    main()
